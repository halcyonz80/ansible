---
# tasks file for harden_os

- name: Ensure firewall package is installed
  ansible.builtin.dnf:
    name: firewalld
    state: present

- name: Block non-required services
  ansible.posix.firewalld:
    service: "{{ item }}"
    state: disabled
    permanent: yes
    immediate: yes
  loop:
    - cockpit
    - dhcpv6-client

- name: Add SSH port to public zone
  firewalld:
    zone: dmz
    service: ssh
    state: enabled
    immediate: yes
    permanent: yes

- name: Allow SSH from specific IP addresses
  firewalld:
    zone: dmz
    source: "{{ item }}"
    immediate: yes
    state: enabled
    permanent: yes
  with_items:
    - 90.155.89.191/32
    - 217.138.20.164/32
    - 212.18.250.0/24

      #- name: Drop other incoming SSH traffic
      #  firewalld:
      #  service: ssh
      #  state: disabled

- name: Ensure firewall service is up and running
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: yes

- name: Ensure SELinux is enabled and enforcing
  ansible.posix.selinux:
    policy: targeted
    state: enforcing
  register: selinux_status

- name: Verify if reboot needed
  ansible.builtin.debug:
    msg: "Reboot needed: {{ selinux_status.reboot_required }}"
  changed_when:  selinux_status.reboot_required | bool 
  #notify: reboot_host

  ## This parameters are pulled from the vars/ directory
- name: Knot tuning
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: yes
    reload: yes
    sysctl_file: /etc/sysctl.d/99-cnic-knot.conf
  loop: "{{ knot_sysctl_parameters }}"
  when: "'knot_servers' in group_names"
  ignore_errors: true
  
    ## This parameters are pulled from the vars/ directory
- name: Bind tuning
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: yes
    reload: yes
    sysctl_file: /etc/sysctl.d/99-cnic-bind.conf
  loop: "{{ bind_sysctl_parameters }}"
  ignore_errors: true

- name: Harden kernel parameters
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/99-cnic-kernel.conf
  loop: "{{ kernel_sysctl_settings }}"
  ignore_errors: true

- name: Ensure audit package is installed
  ansible.builtin.dnf:
    name: audit
    state: present

- name: Ensure auditd service is up and running
  ansible.builtin.service:
    name: auditd
    state: started
    enabled: yes

- name: Add a basic audit config
  ansible.builtin.copy:
    src: cnic-audit.rules
    dest: /etc/audit/rules.d/cnic-audit.rules
    owner: root
    group: root
    mode: 0600
    #notify: reboot_host

